{"ast":null,"code":"//! moment.js locale configuration\n//! locale : Japanese [ja]\n//! author : LI Long : https://github.com/baryon\n;\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' && typeof require === 'function' ? factory(require('../moment')) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n})(this, function (moment) {\n  'use strict'; //! moment.js locale configuration\n\n  var ja = moment.defineLocale('ja', {\n    eras: [{\n      since: '2019-05-01',\n      offset: 1,\n      name: '令和',\n      narrow: '㋿',\n      abbr: 'R'\n    }, {\n      since: '1989-01-08',\n      until: '2019-04-30',\n      offset: 1,\n      name: '平成',\n      narrow: '㍻',\n      abbr: 'H'\n    }, {\n      since: '1926-12-25',\n      until: '1989-01-07',\n      offset: 1,\n      name: '昭和',\n      narrow: '㍼',\n      abbr: 'S'\n    }, {\n      since: '1912-07-30',\n      until: '1926-12-24',\n      offset: 1,\n      name: '大正',\n      narrow: '㍽',\n      abbr: 'T'\n    }, {\n      since: '1873-01-01',\n      until: '1912-07-29',\n      offset: 6,\n      name: '明治',\n      narrow: '㍾',\n      abbr: 'M'\n    }, {\n      since: '0001-01-01',\n      until: '1873-12-31',\n      offset: 1,\n      name: '西暦',\n      narrow: 'AD',\n      abbr: 'AD'\n    }, {\n      since: '0000-12-31',\n      until: -Infinity,\n      offset: 1,\n      name: '紀元前',\n      narrow: 'BC',\n      abbr: 'BC'\n    }],\n    eraYearOrdinalRegex: /(元|\\d+)年/,\n    eraYearOrdinalParse: function (input, match) {\n      return match[1] === '元' ? 1 : parseInt(match[1] || input, 10);\n    },\n    months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n    monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n    weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),\n    weekdaysShort: '日_月_火_水_木_金_土'.split('_'),\n    weekdaysMin: '日_月_火_水_木_金_土'.split('_'),\n    longDateFormat: {\n      LT: 'HH:mm',\n      LTS: 'HH:mm:ss',\n      L: 'YYYY/MM/DD',\n      LL: 'YYYY年M月D日',\n      LLL: 'YYYY年M月D日 HH:mm',\n      LLLL: 'YYYY年M月D日 dddd HH:mm',\n      l: 'YYYY/MM/DD',\n      ll: 'YYYY年M月D日',\n      lll: 'YYYY年M月D日 HH:mm',\n      llll: 'YYYY年M月D日(ddd) HH:mm'\n    },\n    meridiemParse: /午前|午後/i,\n    isPM: function (input) {\n      return input === '午後';\n    },\n    meridiem: function (hour, minute, isLower) {\n      if (hour < 12) {\n        return '午前';\n      } else {\n        return '午後';\n      }\n    },\n    calendar: {\n      sameDay: '[今日] LT',\n      nextDay: '[明日] LT',\n      nextWeek: function (now) {\n        if (now.week() !== this.week()) {\n          return '[来週]dddd LT';\n        } else {\n          return 'dddd LT';\n        }\n      },\n      lastDay: '[昨日] LT',\n      lastWeek: function (now) {\n        if (this.week() !== now.week()) {\n          return '[先週]dddd LT';\n        } else {\n          return 'dddd LT';\n        }\n      },\n      sameElse: 'L'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}日/,\n    ordinal: function (number, period) {\n      switch (period) {\n        case 'y':\n          return number === 1 ? '元年' : number + '年';\n\n        case 'd':\n        case 'D':\n        case 'DDD':\n          return number + '日';\n\n        default:\n          return number;\n      }\n    },\n    relativeTime: {\n      future: '%s後',\n      past: '%s前',\n      s: '数秒',\n      ss: '%d秒',\n      m: '1分',\n      mm: '%d分',\n      h: '1時間',\n      hh: '%d時間',\n      d: '1日',\n      dd: '%d日',\n      M: '1ヶ月',\n      MM: '%dヶ月',\n      y: '1年',\n      yy: '%d年'\n    }\n  });\n  return ja;\n});","map":{"version":3,"names":["global","factory","exports","module","require","define","amd","moment","ja","defineLocale","eras","since","offset","name","narrow","abbr","until","Infinity","eraYearOrdinalRegex","eraYearOrdinalParse","input","match","parseInt","months","split","monthsShort","weekdays","weekdaysShort","weekdaysMin","longDateFormat","LT","LTS","L","LL","LLL","LLLL","l","ll","lll","llll","meridiemParse","isPM","meridiem","hour","minute","isLower","calendar","sameDay","nextDay","nextWeek","now","week","lastDay","lastWeek","sameElse","dayOfMonthOrdinalParse","ordinal","number","period","relativeTime","future","past","s","ss","m","mm","h","hh","d","dd","M","MM","y","yy"],"sources":["F:/day/social_vue/node_modules/moment/locale/ja.js"],"sourcesContent":["//! moment.js locale configuration\n//! locale : Japanese [ja]\n//! author : LI Long : https://github.com/baryon\n\n;(function (global, factory) {\n   typeof exports === 'object' && typeof module !== 'undefined'\n       && typeof require === 'function' ? factory(require('../moment')) :\n   typeof define === 'function' && define.amd ? define(['../moment'], factory) :\n   factory(global.moment)\n}(this, (function (moment) { 'use strict';\n\n    //! moment.js locale configuration\n\n    var ja = moment.defineLocale('ja', {\n        eras: [\n            {\n                since: '2019-05-01',\n                offset: 1,\n                name: '令和',\n                narrow: '㋿',\n                abbr: 'R',\n            },\n            {\n                since: '1989-01-08',\n                until: '2019-04-30',\n                offset: 1,\n                name: '平成',\n                narrow: '㍻',\n                abbr: 'H',\n            },\n            {\n                since: '1926-12-25',\n                until: '1989-01-07',\n                offset: 1,\n                name: '昭和',\n                narrow: '㍼',\n                abbr: 'S',\n            },\n            {\n                since: '1912-07-30',\n                until: '1926-12-24',\n                offset: 1,\n                name: '大正',\n                narrow: '㍽',\n                abbr: 'T',\n            },\n            {\n                since: '1873-01-01',\n                until: '1912-07-29',\n                offset: 6,\n                name: '明治',\n                narrow: '㍾',\n                abbr: 'M',\n            },\n            {\n                since: '0001-01-01',\n                until: '1873-12-31',\n                offset: 1,\n                name: '西暦',\n                narrow: 'AD',\n                abbr: 'AD',\n            },\n            {\n                since: '0000-12-31',\n                until: -Infinity,\n                offset: 1,\n                name: '紀元前',\n                narrow: 'BC',\n                abbr: 'BC',\n            },\n        ],\n        eraYearOrdinalRegex: /(元|\\d+)年/,\n        eraYearOrdinalParse: function (input, match) {\n            return match[1] === '元' ? 1 : parseInt(match[1] || input, 10);\n        },\n        months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(\n            '_'\n        ),\n        weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),\n        weekdaysShort: '日_月_火_水_木_金_土'.split('_'),\n        weekdaysMin: '日_月_火_水_木_金_土'.split('_'),\n        longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'YYYY/MM/DD',\n            LL: 'YYYY年M月D日',\n            LLL: 'YYYY年M月D日 HH:mm',\n            LLLL: 'YYYY年M月D日 dddd HH:mm',\n            l: 'YYYY/MM/DD',\n            ll: 'YYYY年M月D日',\n            lll: 'YYYY年M月D日 HH:mm',\n            llll: 'YYYY年M月D日(ddd) HH:mm',\n        },\n        meridiemParse: /午前|午後/i,\n        isPM: function (input) {\n            return input === '午後';\n        },\n        meridiem: function (hour, minute, isLower) {\n            if (hour < 12) {\n                return '午前';\n            } else {\n                return '午後';\n            }\n        },\n        calendar: {\n            sameDay: '[今日] LT',\n            nextDay: '[明日] LT',\n            nextWeek: function (now) {\n                if (now.week() !== this.week()) {\n                    return '[来週]dddd LT';\n                } else {\n                    return 'dddd LT';\n                }\n            },\n            lastDay: '[昨日] LT',\n            lastWeek: function (now) {\n                if (this.week() !== now.week()) {\n                    return '[先週]dddd LT';\n                } else {\n                    return 'dddd LT';\n                }\n            },\n            sameElse: 'L',\n        },\n        dayOfMonthOrdinalParse: /\\d{1,2}日/,\n        ordinal: function (number, period) {\n            switch (period) {\n                case 'y':\n                    return number === 1 ? '元年' : number + '年';\n                case 'd':\n                case 'D':\n                case 'DDD':\n                    return number + '日';\n                default:\n                    return number;\n            }\n        },\n        relativeTime: {\n            future: '%s後',\n            past: '%s前',\n            s: '数秒',\n            ss: '%d秒',\n            m: '1分',\n            mm: '%d分',\n            h: '1時間',\n            hh: '%d時間',\n            d: '1日',\n            dd: '%d日',\n            M: '1ヶ月',\n            MM: '%dヶ月',\n            y: '1年',\n            yy: '%d年',\n        },\n    });\n\n    return ja;\n\n})));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}